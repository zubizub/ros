---------------------------------------------------------------------------------------------
-------------типичное поведение при решении задач--------------------------------------------

---------------------------
общее----------------------

	- начало работы:
		1) открываем папку сайта
		2) заходим в консоль в ней (можно использовать git bash в качестве консоли)
		3) gulp watch (следит за изменениями и делает автокомпиляцию файлов в папках 
			/www/template/assets/css/ и /www/template/assets/js/)

	- новые шрифты
		/www/template/assets/fonts_ttf/ - сюда исходники кладем
		/www/template/build/fonts/ - сюда web шрифты
		/www/template/assets/css/common/_fonts.scss - здесь подключаем шрифт
		
	- новые картинки
		/www/template/build/img/ - сюда web шрифты
	
---------------------------
js-------------------------

- новая js библиотека
	1) кладем библиотеку сюда /www/template/assets/js/libs/
	2) после подключения файла jquery тут /www/template/assets/js/main.js 
		пишем "//= libs/ИМЯ_ФАЙЛА_НОВОЙ_БИБЛИОТЕКИ" (это аналогично include в php)
	
- новый js для блока сайта
	1) создаем файл тут /www/template/assets/js/prod/ аналогичный header.js
		в папке /www/template/assets/js/prod/ИМЯ_ФАЙЛА_БЛОКА_САЙТА.js
	2) Меняем наименование класса в файле /www/template/assets/js/prod/ИМЯ_ФАЙЛА_БЛОКА_САЙТА.js 
		на нужный (то есть "header" на "ИМЯ_ФАЙЛА_БЛОКА_САЙТА", если копировали header.js )
	3) перед кодом "Application = new function()" тут /www/template/assets/js/main.js 
		пишем "//= prod/ИМЯ_ФАЙЛА_БЛОКА_САЙТА.js" (это аналогично include в php)
	4) подключаем новый класс к Application
		после кода "Application = new function()" после всех подключенных в this через new классов подключаем свой:
		пишем "this.ИМЯ_ФАЙЛА_БЛОКА_САЙТА = new ИМЯ_ФАЙЛА_БЛОКА_САЙТА();"
	
- вспомогательные функции пишем в файлы usefulFunc.js и siteInterface.js
	usefulFunc.js - полезные функции, например, валидация на email, 
		задаем функции через that
			that._НАИМЕНОВАНИЕ_ФУНКЦИИ_= function(){ /*код функции*/ };
		Используем в других классах
			that.parentClass.usefulFunc._НАИМЕНОВАНИЕ_ФУНКЦИИ_();
	siteInterface.js - сюда пишем общие функции по работе с интерфесом (html), 
		например, функции по установке ошибок при валидации формы, используем аналогично usefulFunc
	
---------------------------
css------------------------
		
- редактирование каркаса сайта (как сайт резинится) + общие стили ссылок и текстовок
	пишем стили сюда /www/template/assets/css/common/_common.scss
		
- новый раздел css на сайте:
	1) создаем файл тут /www/template/assets/css/layout/_ИМЯ_ФАЙЛА.scss
	2) добавляем путь к нему сюда /www/template/assets/css/main.scss в конец файла
		
- стили кнопок или часто повторяющиеся объекты дизайна (например, карточки товаров)
	/www/template/assets/css/modules/_ui.scss
- иконки. подключенные (файл /www/template/assets/css/libs/_font-awesome.min.scss)
	полный список иконок тут http://fortawesome.github.io/Font-Awesome/icons/
	пишем в html элемент с классом .fa-НАИМЕНОВАНИЕ_ИЗ_СПИСКА_ИКОНОК_ПО_ССЫЛКЕ_ВЫШЕ
	Размер иконки зависит от размера шрифта
	
- иконки. свои. генерируем шрифт в https://icomoon.io/
	пишем сюда css с классами /www/template/assets/css/common/_icons.scss
	сюда json с настройками от icomoon (будет в архиве шрифта) /www/template/assets/fonts_ttf/icomoon/
	

- подключенные миксины (compass)
	/template/assets/css/libs/_mixins.scss
	
- свои миксины sass пишем сюда (здесь лежат миксины Дениса Золотарева на момент создания каркаса + Ваши будут)
	/template/assets/css/modules/_custom_mixins.scss
	
	